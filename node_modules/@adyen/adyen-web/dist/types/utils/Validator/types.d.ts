import { ValidationRuleResult } from './ValidationRuleResult';
declare type ValidatorMode = 'blur' | 'input';
export declare type ErrorMessageObject = {
    translationKey: string;
    translationObject: any;
};
export declare type Ruleset = {
    [key: string]: any;
};
export declare type CountryRuleset = {
    [country: string]: Ruleset;
};
declare type FormatterFn = (value: any, context?: any) => string;
export interface Format {
    formatter?: FormatterFn;
    format?: string;
    maxlength?: number;
}
export declare type FormatRules = {
    [field: string]: Format;
};
export declare type CountryFormatRules = {
    [country: string]: FormatRules;
};
export interface ValidatorRule {
    validate: (value: any, context?: any) => boolean;
    errorMessage?: string | ErrorMessageObject;
    modes: ValidatorMode[];
}
export declare type ValidatorRules = {
    [field: string]: ValidatorRule | ValidatorRule[];
};
export declare type CountryBasedValidatorRules = {
    [country: string]: ValidatorRules;
};
export interface FieldData {
    key: string;
    value: string;
    mode?: ValidatorMode;
}
export interface FieldContext {
    state: {
        [key: string]: any;
    };
}
export declare type ValidationRuleResults = {
    [key: string]: ValidationRuleResult;
};
export {};
