import { Order, PaymentAction, PaymentAmount, PaymentAmountExtended } from '../types';
import UIElement from './UIElement';
import Core from '../core';
import Analytics from '../core/Analytics';
import RiskElement from '../core/RiskModule';
import { PayButtonProps } from './internal/PayButton/PayButton';
import Session from '../core/CheckoutSession';
export interface PaymentResponse {
    action?: PaymentAction;
    resultCode: string;
    sessionData?: string;
    order?: Order;
}
export interface RawPaymentResponse extends PaymentResponse {
    [key: string]: any;
}
export interface BaseElementProps {
    _parentInstance?: Core;
    order?: Order;
    modules?: {
        analytics: Analytics;
        risk: RiskElement;
    };
    isDropin?: boolean;
}
export interface IUIElement {
    isValid: boolean;
    displayName: string;
    accessibleName: string;
    type: string;
    elementRef: any;
    submit(): void;
    setElementStatus(status: UIElementStatus, props: any): UIElement;
    setStatus(status: UIElementStatus, props?: {
        message?: string;
        [key: string]: any;
    }): UIElement;
    handleAction(action: PaymentAction): UIElement | null;
    showValidation(): void;
    setState(newState: object): void;
}
export declare type UIElementStatus = 'ready' | 'loading' | 'error' | 'success';
export declare type PayButtonFunctionProps = Omit<PayButtonProps, 'amount'>;
export interface UIElementProps extends BaseElementProps {
    session?: Session;
    onChange?: (state: any, element: UIElement) => void;
    onValid?: (state: any, element: UIElement) => void;
    beforeSubmit?: (state: any, element: UIElement, actions: any) => Promise<void>;
    onSubmit?: (state: any, element: UIElement) => void;
    onComplete?: (state: any, element: UIElement) => void;
    onAdditionalDetails?: (state: any, element: UIElement) => void;
    onError?: (error: any, element?: UIElement) => void;
    onPaymentCompleted?: (result: any, element: UIElement) => void;
    beforeRedirect?: (resolve: any, reject: any, redirectData: any, element: UIElement) => void;
    isInstantPayment?: boolean;
    type?: string;
    name?: string;
    icon?: string;
    amount?: PaymentAmount;
    secondaryAmount?: PaymentAmountExtended;
    /**
     * Show/Hide pay button
     * @defaultValue true
     */
    showPayButton?: boolean;
    /**
     *  Set to false to not set the Component status to 'loading' when onSubmit is triggered.
     *  @defaultValue true
     */
    setStatusAutomatically?: boolean;
}
