import { h } from 'preact';
import BaseElement from './BaseElement';
import { Order, PaymentAction } from '../types';
import { IUIElement, PayButtonFunctionProps, UIElementProps } from './types';
import AdyenCheckoutError from '../core/Errors/AdyenCheckoutError';
import { UIElementStatus } from './types';
export declare class UIElement<P extends UIElementProps = any> extends BaseElement<P> implements IUIElement {
    protected componentRef: any;
    elementRef: any;
    constructor(props: P);
    setState(newState: object): void;
    protected onChange(): object;
    private onSubmit;
    private onValid;
    onComplete(state: any): void;
    /**
     * Submit payment method data. If the form is not valid, it will trigger validation.
     */
    submit(): void;
    showValidation(): this;
    setElementStatus(status: UIElementStatus, props?: any): this;
    setStatus(status: UIElementStatus, props?: any): this;
    private submitPayment;
    private submitAdditionalDetails;
    protected handleError: (error: AdyenCheckoutError) => void;
    protected handleAdditionalDetails: (state: any) => any;
    handleAction(action: PaymentAction, props?: {}): UIElement | null;
    protected handleOrder: (order: Order) => void;
    protected handleFinalResult: (result: any) => any;
    /**
     * Handles a session /payments or /payments/details response.
     * The component will handle automatically actions, orders, and final results.
     * @param rawResponse -
     */
    protected handleResponse(rawResponse: any): void;
    /**
     * Get the current validation status of the element
     */
    get isValid(): boolean;
    /**
     * Get the element icon URL for the current environment
     */
    get icon(): string;
    /**
     * Get the element's displayable name
     */
    get displayName(): string;
    /**
     * Get the element accessible name, used in the aria-label of the button that controls selected payment method
     */
    get accessibleName(): string;
    /**
     * Return the type of an element
     */
    get type(): string;
    /**
     * Get the payButton component for the current element
     */
    protected payButton: (props: PayButtonFunctionProps) => h.JSX.Element;
}
export default UIElement;
