import { ErrorPanelObj } from '../../../../core/Errors/ErrorPanel';
import { AddressModeOptions, CardInputProps, LayoutObj, SortErrorsObj } from './types';
import { InstallmentsObj } from './components/Installments/Installments';
import { SFPProps } from '../../../internal/SecuredFields/SFP/types';
export declare const getCardImageUrl: (brand: string, loadingContext: string) => string;
/**
 * Verifies that installment object is valid to send to the Backend.
 * Valid means that it has 'revolving' plan set, or the number of installments is bigger than one
 */
export declare const hasValidInstallmentsObject: (installments?: InstallmentsObj) => boolean;
export declare const getLayout: ({ props, showKCP, showBrazilianSSN, countrySpecificSchemas, billingAddressRequiredFields }: LayoutObj) => string[];
export declare const sortErrorsForPanel: ({ errors, layout, i18n, countrySpecificLabels }: SortErrorsObj) => ErrorPanelObj;
export declare const extractPropsForCardFields: (props: CardInputProps) => {
    amount: import("../../../../types").PaymentAmount;
    billingAddressRequired: boolean;
    billingAddressRequiredFields: string[];
    billingAddressAllowedCountries: string[];
    brandsConfiguration: import("../../types").CardBrandsConfiguration;
    enableStoreDetails: boolean;
    hasCVC: boolean;
    hasHolderName: boolean;
    holderNameRequired: boolean;
    installmentOptions: import("./components/types").InstallmentOptions;
    placeholders: {
        holderName?: string;
    };
    positionHolderNameOnTop: boolean;
    showBrandIcon: boolean;
    showBrandsUnderCardNumber: boolean;
    lastFour: string;
    expiryMonth: string;
    expiryYear: string;
};
export declare const extractPropsForSFP: (props: CardInputProps) => SFPProps;
export declare const handlePartialAddressMode: (addressMode: AddressModeOptions) => any[] | {
    default: {
        labels: {
            postalCode: string;
        };
        schema: "postalCode"[];
    };
};
