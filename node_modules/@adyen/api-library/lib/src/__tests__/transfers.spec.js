"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const base_1 = require("../__mocks__/base");
const responses_1 = require("../__mocks__/transfers/responses");
const client_1 = __importDefault(require("../client"));
const services_1 = require("../services");
const models_1 = require("../typings/transfer/models");
let client;
let transferService;
let scope;
beforeEach(() => {
    if (!nock_1.default.isActive()) {
        nock_1.default.activate();
    }
    client = (0, base_1.createClient)();
    transferService = new services_1.Transfers(client);
    scope = (0, nock_1.default)(`https://balanceplatform-api-test.adyen.com/btl/${client_1.default.TRANSFERS_API_VERSION}`);
});
afterEach(() => {
    nock_1.default.cleanAll();
});
describe("Transfers", () => {
    test("should transfer fund", async () => {
        scope.post("/transfers")
            .reply(200, responses_1.transfersSuccess);
        const request = new models_1.TransferInfo();
        request.amount = { currency: "EUR", value: 1000 };
        request.category = models_1.TransferInfo.CategoryEnum.Bank;
        request.counterparty = {
            balanceAccountId: "123",
            transferInstrumentId: "transfer_id",
            bankAccount: {
                accountHolder: {
                    fullName: "Wally Bizzle"
                },
                accountIdentification: {
                    iban: "NLRABO12321",
                    type: models_1.IbanAccountIdentification.TypeEnum.Iban
                }
            },
        };
        const response = await transferService.transfers(request);
        expect(response.id).toEqual("1W1UG35U8A9J5ZLG");
    });
    test("should get transaction", async () => {
        scope.get("/transactions/123")
            .reply(200, responses_1.getTransactionSuccess);
        const response = await transferService.getTransaction("123");
        expect(response.id).toEqual("IZK7C25U7DYVX03Y");
    });
    test("should list transactions", async () => {
        var _a, _b, _c;
        scope.get("/transactions")
            .reply(200, responses_1.listTransactionsSuccess);
        const response = await transferService.listTransactions();
        expect((_a = response.data) === null || _a === void 0 ? void 0 : _a.length).toEqual(3);
        if (response.data && ((_b = response.data) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            expect((_c = response === null || response === void 0 ? void 0 : response.data[0]) === null || _c === void 0 ? void 0 : _c.id).toEqual("1VVF0D5U66PIUIVP");
        }
        else {
            fail();
        }
    });
});
//# sourceMappingURL=transfers.spec.js.map