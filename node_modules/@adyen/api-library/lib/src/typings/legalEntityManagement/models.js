"use strict";
/*
 * The version of the OpenAPI document: v2
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("./address"), exports);
__exportStar(require("./attachment"), exports);
__exportStar(require("./bankAccountInfo"), exports);
__exportStar(require("./birthData"), exports);
__exportStar(require("./businessLine"), exports);
__exportStar(require("./businessLineInfo"), exports);
__exportStar(require("./businessLineInfoUpdate"), exports);
__exportStar(require("./businessLines"), exports);
__exportStar(require("./document"), exports);
__exportStar(require("./documentReference"), exports);
__exportStar(require("./entityReference"), exports);
__exportStar(require("./genericEntityInfo"), exports);
__exportStar(require("./identificationData"), exports);
__exportStar(require("./individual"), exports);
__exportStar(require("./legalEntity"), exports);
__exportStar(require("./legalEntityAssociation"), exports);
__exportStar(require("./legalEntityInfo"), exports);
__exportStar(require("./name"), exports);
__exportStar(require("./onboardingLink"), exports);
__exportStar(require("./onboardingLinkInfo"), exports);
__exportStar(require("./onboardingTheme"), exports);
__exportStar(require("./onboardingThemes"), exports);
__exportStar(require("./organization"), exports);
__exportStar(require("./ownerEntity"), exports);
__exportStar(require("./phoneNumber"), exports);
__exportStar(require("./recurringDetail"), exports);
__exportStar(require("./serviceError"), exports);
__exportStar(require("./soleProprietorship"), exports);
__exportStar(require("./sourceOfFunds"), exports);
__exportStar(require("./stockData"), exports);
__exportStar(require("./taxInformation"), exports);
__exportStar(require("./taxReportingClassification"), exports);
__exportStar(require("./transferInstrument"), exports);
__exportStar(require("./transferInstrumentInfo"), exports);
__exportStar(require("./webData"), exports);
__exportStar(require("./webDataExemption"), exports);
const address_1 = require("./address");
const attachment_1 = require("./attachment");
const bankAccountInfo_1 = require("./bankAccountInfo");
const birthData_1 = require("./birthData");
const businessLine_1 = require("./businessLine");
const businessLineInfo_1 = require("./businessLineInfo");
const businessLineInfoUpdate_1 = require("./businessLineInfoUpdate");
const businessLines_1 = require("./businessLines");
const document_1 = require("./document");
const documentReference_1 = require("./documentReference");
const entityReference_1 = require("./entityReference");
const genericEntityInfo_1 = require("./genericEntityInfo");
const identificationData_1 = require("./identificationData");
const individual_1 = require("./individual");
const legalEntity_1 = require("./legalEntity");
const legalEntityAssociation_1 = require("./legalEntityAssociation");
const legalEntityInfo_1 = require("./legalEntityInfo");
const name_1 = require("./name");
const onboardingLink_1 = require("./onboardingLink");
const onboardingLinkInfo_1 = require("./onboardingLinkInfo");
const onboardingTheme_1 = require("./onboardingTheme");
const onboardingThemes_1 = require("./onboardingThemes");
const organization_1 = require("./organization");
const ownerEntity_1 = require("./ownerEntity");
const phoneNumber_1 = require("./phoneNumber");
const recurringDetail_1 = require("./recurringDetail");
const serviceError_1 = require("./serviceError");
const soleProprietorship_1 = require("./soleProprietorship");
const sourceOfFunds_1 = require("./sourceOfFunds");
const stockData_1 = require("./stockData");
const taxInformation_1 = require("./taxInformation");
const taxReportingClassification_1 = require("./taxReportingClassification");
const transferInstrument_1 = require("./transferInstrument");
const transferInstrumentInfo_1 = require("./transferInstrumentInfo");
const webData_1 = require("./webData");
const webDataExemption_1 = require("./webDataExemption");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "Document.TypeEnum": document_1.Document.TypeEnum,
    "IdentificationData.TypeEnum": identificationData_1.IdentificationData.TypeEnum,
    "LegalEntity.TypeEnum": legalEntity_1.LegalEntity.TypeEnum,
    "LegalEntityAssociation.TypeEnum": legalEntityAssociation_1.LegalEntityAssociation.TypeEnum,
    "LegalEntityInfo.TypeEnum": legalEntityInfo_1.LegalEntityInfo.TypeEnum,
    "Organization.TypeEnum": organization_1.Organization.TypeEnum,
    "Organization.VatAbsenceReasonEnum": organization_1.Organization.VatAbsenceReasonEnum,
    "SoleProprietorship.VatAbsenceReasonEnum": soleProprietorship_1.SoleProprietorship.VatAbsenceReasonEnum,
    "SourceOfFunds.TypeEnum": sourceOfFunds_1.SourceOfFunds.TypeEnum,
    "TaxReportingClassification.BusinessTypeEnum": taxReportingClassification_1.TaxReportingClassification.BusinessTypeEnum,
    "TaxReportingClassification.MainSourceOfIncomeEnum": taxReportingClassification_1.TaxReportingClassification.MainSourceOfIncomeEnum,
    "TaxReportingClassification.TypeEnum": taxReportingClassification_1.TaxReportingClassification.TypeEnum,
    "TransferInstrument.TypeEnum": transferInstrument_1.TransferInstrument.TypeEnum,
    "TransferInstrumentInfo.TypeEnum": transferInstrumentInfo_1.TransferInstrumentInfo.TypeEnum,
    "WebDataExemption.ReasonEnum": webDataExemption_1.WebDataExemption.ReasonEnum,
};
let typeMap = {
    "Address": address_1.Address,
    "Attachment": attachment_1.Attachment,
    "BankAccountInfo": bankAccountInfo_1.BankAccountInfo,
    "BirthData": birthData_1.BirthData,
    "BusinessLine": businessLine_1.BusinessLine,
    "BusinessLineInfo": businessLineInfo_1.BusinessLineInfo,
    "BusinessLineInfoUpdate": businessLineInfoUpdate_1.BusinessLineInfoUpdate,
    "BusinessLines": businessLines_1.BusinessLines,
    "Document": document_1.Document,
    "DocumentReference": documentReference_1.DocumentReference,
    "EntityReference": entityReference_1.EntityReference,
    "GenericEntityInfo": genericEntityInfo_1.GenericEntityInfo,
    "IdentificationData": identificationData_1.IdentificationData,
    "Individual": individual_1.Individual,
    "LegalEntity": legalEntity_1.LegalEntity,
    "LegalEntityAssociation": legalEntityAssociation_1.LegalEntityAssociation,
    "LegalEntityInfo": legalEntityInfo_1.LegalEntityInfo,
    "Name": name_1.Name,
    "OnboardingLink": onboardingLink_1.OnboardingLink,
    "OnboardingLinkInfo": onboardingLinkInfo_1.OnboardingLinkInfo,
    "OnboardingTheme": onboardingTheme_1.OnboardingTheme,
    "OnboardingThemes": onboardingThemes_1.OnboardingThemes,
    "Organization": organization_1.Organization,
    "OwnerEntity": ownerEntity_1.OwnerEntity,
    "PhoneNumber": phoneNumber_1.PhoneNumber,
    "RecurringDetail": recurringDetail_1.RecurringDetail,
    "ServiceError": serviceError_1.ServiceError,
    "SoleProprietorship": soleProprietorship_1.SoleProprietorship,
    "SourceOfFunds": sourceOfFunds_1.SourceOfFunds,
    "StockData": stockData_1.StockData,
    "TaxInformation": taxInformation_1.TaxInformation,
    "TaxReportingClassification": taxReportingClassification_1.TaxReportingClassification,
    "TransferInstrument": transferInstrument_1.TransferInstrument,
    "TransferInstrumentInfo": transferInstrumentInfo_1.TransferInstrumentInfo,
    "WebData": webData_1.WebData,
    "WebDataExemption": webDataExemption_1.WebDataExemption,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=models.js.map